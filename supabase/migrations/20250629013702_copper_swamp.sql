-- ðŸš¨ MIGRAÈšIA PENTRU REZOLVAREA PROBLEMEI CU POLITICA RLS LA INSERARE ANUNÈšURI
-- RuleazÄƒ aceastÄƒ migraÈ›ie Ã®n Supabase Dashboard â†’ SQL Editor

-- Pasul 1: DezactiveazÄƒ temporar RLS pentru a opri recursiunea
ALTER TABLE listings DISABLE ROW LEVEL SECURITY;

-- Pasul 2: È˜terge politicile existente pentru listings
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'listings' AND schemaname = 'public') LOOP
        EXECUTE 'DROP POLICY IF EXISTS "' || r.policyname || '" ON public.listings';
    END LOOP;
END $$;

-- Pasul 3: ReactiveazÄƒ RLS
ALTER TABLE listings ENABLE ROW LEVEL SECURITY;

-- Pasul 4: CreeazÄƒ politici noi pentru listings

-- PoliticÄƒ pentru SELECT - ToatÄƒ lumea poate vedea anunÈ›urile active
CREATE POLICY "listings_select_active" ON listings
  FOR SELECT USING (status = 'active');

-- PoliticÄƒ pentru SELECT - Utilizatorii pot vedea propriile anunÈ›uri (inclusiv cele Ã®n aÈ™teptare)
CREATE POLICY "listings_select_own" ON listings
  FOR SELECT USING (
    auth.uid() IS NOT NULL AND 
    seller_id IN (
      SELECT id FROM profiles 
      WHERE user_id = auth.uid()
    )
  );

-- PoliticÄƒ pentru INSERT - Utilizatorii autentificaÈ›i pot crea anunÈ›uri (inclusiv cu status "pending")
-- ACEASTA ESTE POLITICA CORECTATÄ‚ - mult mai permisivÄƒ pentru inserare
CREATE POLICY "listings_insert" ON listings
  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

-- PoliticÄƒ pentru UPDATE - Utilizatorii pot actualiza propriile anunÈ›uri
CREATE POLICY "listings_update_own" ON listings
  FOR UPDATE USING (
    auth.uid() IS NOT NULL AND 
    seller_id IN (
      SELECT id FROM profiles 
      WHERE user_id = auth.uid()
    )
  );

-- PoliticÄƒ pentru DELETE - Utilizatorii pot È™terge propriile anunÈ›uri
CREATE POLICY "listings_delete_own" ON listings
  FOR DELETE USING (
    auth.uid() IS NOT NULL AND 
    seller_id IN (
      SELECT id FROM profiles 
      WHERE user_id = auth.uid()
    )
  );

-- Politici pentru admin - folosind email Ã®n loc de subqueries
CREATE POLICY "admin_select_all_listings" ON listings
  FOR SELECT USING (
    auth.email() = 'admin@nexar.ro'
  );

CREATE POLICY "admin_update_all_listings" ON listings
  FOR UPDATE USING (
    auth.email() = 'admin@nexar.ro'
  );

CREATE POLICY "admin_delete_all_listings" ON listings
  FOR DELETE USING (
    auth.email() = 'admin@nexar.ro'
  );

-- Pasul 5: AdaugÄƒ index pentru performanÈ›Äƒ
CREATE INDEX IF NOT EXISTS idx_listings_status ON listings(status);

-- Pasul 6: Test final - verificÄƒ cÄƒ totul funcÈ›ioneazÄƒ
DO $$
BEGIN
  -- TesteazÄƒ accesul la listings
  PERFORM COUNT(*) FROM listings WHERE status = 'active';
  RAISE NOTICE 'Acces la tabela listings: OK';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE WARNING 'Testul a eÈ™uat: %', SQLERRM;
END $$;